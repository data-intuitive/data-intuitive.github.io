<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Data Intuitive</title>
<link>https://www.data-intuitive.com/insights/index.html</link>
<atom:link href="https://www.data-intuitive.com/insights/index.xml" rel="self" type="application/rss+xml"/>
<description>Data Intuitive develops intuitive tools and custom biotech data pipelines to help clients gain valuable insights and make data-driven decisions.</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Mon, 06 Feb 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>DI’s Sustainability and Wellness Initiative</title>
  <link>https://www.data-intuitive.com/insights/news/2023-02-05-sustain/index.html</link>
  <description><![CDATA[ 
<section id="sustainable-telework-a-plan-for-a-better-future" class="level2">
<h2 data-anchor-id="sustainable-telework-a-plan-for-a-better-future">Sustainable Telework: A Plan for a Better Future</h2>
<p>As a telework-based company, Data Intuitive is committed to promoting both sustainability and the well-being of its employees. With the support of Ready2improve and Axudo, the company is developing a comprehensive personal health and sustainability plan in collaboration with its employees. Through organized group sessions during team-building days, the company and its partner aim to foster discussions and generate ideas for a better telework future.</p>
<p>One of the difficulties faced by a fully remote company is fostering a sense of unity and collaboration among employees. To address this, the company explores different work methods and leverages technology to create a virtual environment that mimics the experience of working together in one large shared space. Teleworking also helps reduce commute emissions, promote sustainability, and support personal well-being through flexible work arrangements. The plan places a strong emphasis on open-source technology and support for non-profit scientific organizations, further reinforcing Data Intuitive’s commitment to sustainability.</p>
<p>This effort showcases Data Intuitive’s dedication to sustainability and well-being, and its aim to create a better future for both its employees and the planet.</p>
<p><img src="https://www.data-intuitive.com/insights/news/2023-02-05-sustain/sustainability2.jpg" class="img-fluid"></p>
<button class="btn-action btn btn-info" onclick="goBack()">
Back
</button>
<script>
function goBack() {
  window.history.back();
}
</script>


</section>
 ]]></description>
  <guid>https://www.data-intuitive.com/insights/news/2023-02-05-sustain/index.html</guid>
  <pubDate>Mon, 06 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/news/2023-02-05-sustain/logo.png" medium="image" type="image/png" height="22" width="144"/>
</item>
<item>
  <title>Fueled by VLAIO and Driven by innovation</title>
  <link>https://www.data-intuitive.com/insights/news/2022-12-25-fueled_by_vlaio/index.html</link>
  <description><![CDATA[ 
<p>Data Intuitive is pleased to announce that we have received funding from VLAIO, which will bolster our research and development efforts as we continue to push the boundaries of data science and bioinformatics data pipelines. We are grateful for the support of VLAIO and are excited to see what the future holds as we continue to innovate and progress in our field.</p>
<button class="btn-action btn btn-info" onclick="goBack()">
Back
</button>
<script>
function goBack() {
  window.history.back();
}
</script>


 ]]></description>
  <guid>https://www.data-intuitive.com/insights/news/2022-12-25-fueled_by_vlaio/index.html</guid>
  <pubDate>Sun, 25 Dec 2022 09:00:00 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/news/2022-12-25-fueled_by_vlaio/image.png" medium="image" type="image/png" height="32" width="144"/>
</item>
<item>
  <title>Fit to Go Global</title>
  <link>https://www.data-intuitive.com/insights/news/2022-12-15-fit_to_go_global/index.html</link>
  <description><![CDATA[ 
<p>We are thrilled to announce that this website is being launched with the funding of Flanders Investment and Trade (FIT). This funding will not only help us to create a professional and user-friendly website, but it will also support the international expansion of our company. We are grateful for the support and belief in our mission, and we look forward to working together as we continue to grow and develop on a global scale.</p>
<button class="btn-action btn btn-info" onclick="goBack()">
Back
</button>
<script>
function goBack() {
  window.history.back();
}
</script>


 ]]></description>
  <guid>https://www.data-intuitive.com/insights/news/2022-12-15-fit_to_go_global/index.html</guid>
  <pubDate>Thu, 15 Dec 2022 09:00:00 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/news/2022-12-15-fit_to_go_global/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>anndata: annotated data in R</title>
  <dc:creator>Robrecht Cannoodt</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2021-02-02-anndata-for-r/index.html</link>
  <description><![CDATA[ 



<p><a href="https://anndata.readthedocs.io/en/latest/"><code>anndata</code></a> is a commonly used Python package for keeping track of data and learned annotations, and can be used to read from and write to the h5ad file format. It is also the main data format used in the scanpy python package (Wolf, Angerer, and Theis 2018).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.data-intuitive.com/insights/blog/2021-02-02-anndata-for-r/anndata_for_r.svg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">anndata</figcaption><p></p>
</figure>
</div>
<p>However, using scanpy/anndata in R can be a major hassle. When trying to read an h5ad file, R users could approach this problem in one of two ways. A) You could read in the file manually (since it’s an H5 file), but this involves a lot of manual work and a lot of understanding on how the h5ad and H5 file formats work (also, expect major headaches from cryptic hdf5r bugs). Or B) interact with scanpy and anndata through reticulate, but run into issues converting some of the python objects into R.</p>
<p>We recently published <a href="https://cran.r-project.org/package=anndata"><code>anndata</code></a> on CRAN, which is an R wrapper for the Python package – with some syntax sprinkled on top to make R users feel more at home.</p>
<p>The R anndata is still under active development at <a href="https://github.com/rcannood/anndata">github.com/rcannood/anndata</a>. If you encounter any issues, feel free to post an issue on GitHub!</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Installing <code>anndata</code> is not particularly hard. You do need R and Python to be installed. If you don’t have a working installation of Python, you can let reticulate install Miniconda.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># install the R anndata package</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"anndata"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># skip this if you wish to use the local python installation</span></span>
<span id="cb1-5">reticulate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_miniconda</span>()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># skip this if anndata is already installed</span></span>
<span id="cb1-8">anndata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_anndata</span>()</span></code></pre></div>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>The API of <code>anndata</code> is very similar to its Python counterpart. Check out <code>?anndata</code> for a full list of the functions provided by this package.</p>
<p><code>AnnData</code> stores a data matrix <code>X</code> together with annotations of observations <code>obs</code> (<code>obsm</code>, <code>obsp</code>), variables <code>var</code> (<code>varm</code>, <code>varp</code>), and unstructured annotations <code>uns</code>.</p>
<p>Here is an example of how to create an AnnData object with 2 observations and 3 variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(anndata)</span>
<span id="cb2-2"></span>
<span id="cb2-3">ad <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">AnnData</span>(</span>
<span id="cb2-4">  <span class="at" style="color: #657422;">X =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;">obs =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">group =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>), <span class="at" style="color: #657422;">row.names =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"s1"</span>, <span class="st" style="color: #20794D;">"s2"</span>)),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;">var =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">c</span>(1L, 2L, 3L), <span class="at" style="color: #657422;">row.names =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"var1"</span>, <span class="st" style="color: #20794D;">"var2"</span>, <span class="st" style="color: #20794D;">"var3"</span>)),</span>
<span id="cb2-7">  <span class="at" style="color: #657422;">layers =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb2-8">    <span class="at" style="color: #657422;">spliced =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-9">    <span class="at" style="color: #657422;">unspliced =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="dv" style="color: #AD0000;">8</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">13</span>, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-10">  ),</span>
<span id="cb2-11">  <span class="at" style="color: #657422;">obsm =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb2-12">    <span class="at" style="color: #657422;">ones =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rep</span>(1L, <span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-13">    <span class="at" style="color: #657422;">rand =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">6</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-14">    <span class="at" style="color: #657422;">zeros =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rep</span>(0L, <span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-15">  ),</span>
<span id="cb2-16">  <span class="at" style="color: #657422;">varm =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb2-17">    <span class="at" style="color: #657422;">ones =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rep</span>(1L, <span class="dv" style="color: #AD0000;">12</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb2-18">    <span class="at" style="color: #657422;">rand =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">6</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb2-19">    <span class="at" style="color: #657422;">zeros =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rep</span>(0L, <span class="dv" style="color: #AD0000;">12</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb2-20">  ),</span>
<span id="cb2-21">  <span class="at" style="color: #657422;">uns =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb2-22">    <span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb2-23">    <span class="at" style="color: #657422;">b =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">3</span>)),</span>
<span id="cb2-24">    <span class="at" style="color: #657422;">c =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">c.a =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">c.b =</span> <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb2-25">  )</span>
<span id="cb2-26">)</span>
<span id="cb2-27"></span>
<span id="cb2-28">ad</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>AnnData object with n_obs × n_vars = 2 × 3
    obs: 'group'
    var: 'type'
    uns: 'a', 'b', 'c'
    obsm: 'ones', 'rand', 'zeros'
    varm: 'ones', 'rand', 'zeros'
    layers: 'spliced', 'unspliced'</code></pre>
</div>
</div>
<p>You can read the information back out using the <code>$</code> notation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ad<span class="sc" style="color: #5E5E5E;">$</span>X</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   var1 var2 var3
s1    1    3    5
s2    2    4    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">ad<span class="sc" style="color: #5E5E5E;">$</span>obs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   group
s1     a
s2     b</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">ad<span class="sc" style="color: #5E5E5E;">$</span>obsm[[<span class="st" style="color: #20794D;">"ones"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    1    1    1    1    1
[2,]    1    1    1    1    1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">ad<span class="sc" style="color: #5E5E5E;">$</span>layers[[<span class="st" style="color: #20794D;">"spliced"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   var1 var2 var3
s1    4    6    8
s2    5    7    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">ad<span class="sc" style="color: #5E5E5E;">$</span>uns[[<span class="st" style="color: #20794D;">"b"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  i j      value
1 1 4 0.03063135
2 2 5 0.97626754
3 3 6 0.70391182</code></pre>
</div>
</div>
<section id="using-scanpy" class="level3">
<h3 class="anchored" data-anchor-id="using-scanpy">Using scanpy</h3>
<p>A nice side-effect of loading this package is that it is now super easy to interact with scanpy through these AnnData objects.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">library</span>(reticulate)</span>
<span id="cb14-2"></span>
<span id="cb14-3">ad<span class="sc" style="color: #5E5E5E;">$</span>X</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   var1 var2 var3
s1    1    3    5
s2    2    4    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">sc <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">import</span>(<span class="st" style="color: #20794D;">"scanpy"</span>)</span>
<span id="cb16-2">sc<span class="sc" style="color: #5E5E5E;">$</span>pp<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">normalize_per_cell</span>(ad)</span>
<span id="cb16-3"></span>
<span id="cb16-4">ad<span class="sc" style="color: #5E5E5E;">$</span>X</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       var1 var2     var3
s1 1.166667  3.5 5.833333
s2 1.750000  3.5 5.250000</code></pre>
</div>
</div>
</section>
<section id="reading-writing-anndata-objects" class="level3">
<h3 class="anchored" data-anchor-id="reading-writing-anndata-objects">Reading / writing AnnData objects</h3>
<p>Read from h5ad format:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">read_h5ad</span>(<span class="st" style="color: #20794D;">"pbmc_1k_protein_v3_processed.h5ad"</span>)</span></code></pre></div>
<pre><code>## AnnData object with n_obs × n_vars = 713 × 33538
##     var: 'gene_ids', 'feature_types', 'genome', 'highly_variable', 'means', 'dispersions', 'dispersions_norm'
##     uns: 'hvgParameters', 'normalizationParameters', 'pca', 'pcaParameters'
##     obsm: 'X_pca'
##     varm: 'PCs'</code></pre>
</section>
<section id="creating-a-view" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-view">Creating a view</h3>
<p>You can use any of the regular R indexing methods to subset the <code>AnnData</code> object. This will result in a ‘View’ of the underlying data without needing to store the same data twice.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">view <span class="ot" style="color: #003B4F;">&lt;-</span> ad[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb20-2">view</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>View of AnnData object with n_obs × n_vars = 2 × 1
    obs: 'group', 'n_counts'
    var: 'type'
    uns: 'a', 'b', 'c'
    obsm: 'ones', 'rand', 'zeros'
    varm: 'ones', 'rand', 'zeros'
    layers: 'spliced', 'unspliced'</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">view<span class="sc" style="color: #5E5E5E;">$</span>is_view</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">ad[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"var1"</span>, <span class="st" style="color: #20794D;">"var2"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>View of AnnData object with n_obs × n_vars = 2 × 2
    obs: 'group', 'n_counts'
    var: 'type'
    uns: 'a', 'b', 'c'
    obsm: 'ones', 'rand', 'zeros'
    varm: 'ones', 'rand', 'zeros'
    layers: 'spliced', 'unspliced'</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">ad[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>View of AnnData object with n_obs × n_vars = 1 × 3
    obs: 'group', 'n_counts'
    var: 'type'
    uns: 'a', 'b', 'c'
    obsm: 'ones', 'rand', 'zeros'
    varm: 'ones', 'rand', 'zeros'
    layers: 'spliced', 'unspliced'</code></pre>
</div>
</div>
</section>
<section id="anndata-as-a-matrix" class="level3">
<h3 class="anchored" data-anchor-id="anndata-as-a-matrix">AnnData as a matrix</h3>
<p>The <code>X</code> attribute can be used as an R matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">ad<span class="sc" style="color: #5E5E5E;">$</span>X[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"var1"</span>, <span class="st" style="color: #20794D;">"var2"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       var1 var2
s1 1.166667  3.5
s2 1.750000  3.5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">ad<span class="sc" style="color: #5E5E5E;">$</span>X[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, , drop <span class="ot" style="color: #003B4F;">=</span> <span class="cn" style="color: #8f5902;">FALSE</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   var1 var2 var3
s2 1.75  3.5 5.25</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">ad<span class="sc" style="color: #5E5E5E;">$</span>X[, <span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span></span></code></pre></div>
</div>
<p>You can access a different layer matrix as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">ad<span class="sc" style="color: #5E5E5E;">$</span>layers[<span class="st" style="color: #20794D;">"unspliced"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   var1 var2 var3
s1    8   10   12
s2    9   11   13</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">ad<span class="sc" style="color: #5E5E5E;">$</span>layers[<span class="st" style="color: #20794D;">"unspliced"</span>][,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"var2"</span>, <span class="st" style="color: #20794D;">"var3"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   var2 var3
s1   10   12
s2   11   13</code></pre>
</div>
</div>
</section>
<section id="note-on-state" class="level3">
<h3 class="anchored" data-anchor-id="note-on-state">Note on state</h3>
<p>If you assign an AnnData object to another variable and modify either, both will be modified:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">ad2 <span class="ot" style="color: #003B4F;">&lt;-</span> ad</span>
<span id="cb37-2"></span>
<span id="cb37-3">ad<span class="sc" style="color: #5E5E5E;">$</span>X[,<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb37-4"></span>
<span id="cb37-5"><span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">ad =</span> ad<span class="sc" style="color: #5E5E5E;">$</span>X, <span class="at" style="color: #657422;">ad2 =</span> ad2<span class="sc" style="color: #5E5E5E;">$</span>X)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$ad
       var1 var2     var3
s1 1.166667   10 5.833333
s2 1.750000   10 5.250000

$ad2
       var1 var2     var3
s1 1.166667   10 5.833333
s2 1.750000   10 5.250000</code></pre>
</div>
</div>
<p>This is standard Python behaviour but not R. In order to have two separate copies of an AnnData object, use the <code>$copy()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">ad3 <span class="ot" style="color: #003B4F;">&lt;-</span> ad<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">copy</span>()</span>
<span id="cb39-2"></span>
<span id="cb39-3">ad<span class="sc" style="color: #5E5E5E;">$</span>X[,<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">ad =</span> ad<span class="sc" style="color: #5E5E5E;">$</span>X, <span class="at" style="color: #657422;">ad3 =</span> ad3<span class="sc" style="color: #5E5E5E;">$</span>X)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$ad
       var1 var2     var3
s1 1.166667    3 5.833333
s2 1.750000    4 5.250000

$ad3
       var1 var2     var3
s1 1.166667   10 5.833333
s2 1.750000   10 5.250000</code></pre>
</div>
</div>
</section>
</section>
<section id="future-work" class="level2">
<h2 class="anchored" data-anchor-id="future-work">Future work</h2>
<p>In some cases, this package may still act more like a Python package rather than an R package. Some more helper functions and helper classes need to be defined in order to fully encapsulate <code>AnnData()</code> objects. Examples are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">ad<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">chunked_X</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;generator object AnnData.chunked_X at 0x7f8d3424eac0&gt;</code></pre>
</div>
</div>
<p>Following functionality has not been tested:</p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">ad<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">rename_categories</span>(...)</span>
<span id="cb43-2">ad<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">strings_to_categoricals</span>(...)</span></code></pre></div>
<p>Currently not implemented are the <code>read_zarr()</code> and <code>ad$write_zarr()</code> functions. I need some example data to test this functionality.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>Wolf, F Alexander, Philipp Angerer, and Fabian J Theis. 2018. “SCANPY: Large-Scale Single-Cell Gene Expression Data Analysis.” Genome Biology 19 (February): 15. <a href="https://doi.org/10.1186/s13059-017-1382-0" class="uri">https://doi.org/10.1186/s13059-017-1382-0</a>.</p>
<button class="btn-action btn btn-info" onclick="goBack()">
Back
</button>
<script>
function goBack() {
  window.history.back();
}
</script>


</section>

 ]]></description>
  <category>Data science</category>
  <guid>https://www.data-intuitive.com/insights/blog/2021-02-02-anndata-for-r/index.html</guid>
  <pubDate>Tue, 02 Feb 2021 00:00:00 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/blog/2021-02-02-anndata-for-r/anndata_for_r.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>DiFlow</title>
  <dc:creator>Toni Verbeiren</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2020-12-15-diflow/index.html</link>
  <description><![CDATA[ 



<p>Developing and maintaining pipelines/workflows can be a genuine challenge. Doing this in a collaborative context adds even more to this complexity. We all dream of a flexible platform that allows us to easily express the computational requirements and is able to then run those optimally.</p>
<p>Data Intuitive is working in a project where such a pipeline is being developed. The choice of the platform is <a href="https://www.nextflow.io/">NextFlow</a> and very early on we decided that we wanted to use DSL2 even if it was very early stages.</p>
<p>It turned out, though, that DSL2 in itself did not yet grant us enough flexibility. We ended up creating a set of conventions for creating <em>modules</em> that enable us to achieve our collaborative development goal.</p>
<p>A DiFlow pipeline is a combination of modules:</p>
<ul>
<li>A module contains one step in a larger process</li>
<li>Each module is independent</li>
<li>A module can be tested</li>
<li>A module runs in a dedicated and versioned container</li>
<li>A module takes a triplet as argument:</li>
</ul>
<pre><code>[ ID, data, config ]</code></pre>
<p>Please refer to the <a href="https://github.com/data-intuitive/diflow">GitHub</a> repository for more information and documentation.</p>
<button class="btn-action btn btn-info" onclick="goBack()">
Back
</button>
<script>
function goBack() {
  window.history.back();
}
</script>



 ]]></description>
  <guid>https://www.data-intuitive.com/insights/blog/2020-12-15-diflow/index.html</guid>
  <pubDate>Tue, 15 Dec 2020 09:01:45 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/blog/2020-12-15-diflow/Github_Diflow.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>A Practical Approach to Model Error - Part 2</title>
  <dc:creator>Toni Verbeiren</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/index.html</link>
  <description><![CDATA[ 



<p>It’s been a while since I <a href="http://www.data-intuitive.com/2016/05/a-practical-approach-to-model-error/">first wrote about tackling model error using a simple model</a>. It’s about time to come back to it.</p>
<p>What triggered the current post is the opportunity I was given to give a masterclass in the <a href="https://ec.europa.eu/jrc/en/event/workshop/evidence-and-policy-summer-school-science-policy-and-demography">Evidence and policy summer school</a>. Since my masterclass is about uncertainty in decision making, it seemed like a nice opportunity to look back at the simple model.</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m not going to introduce the model again, but I do want to reiterate that it’s a very simplistic model when it comes to actually modelling the spreading of a real virus. On the other hand though, if <a href="https://www.nobelprize.org/prizes/economics/1997/press-release/">Nobel prizes</a> are awarded for applying this kind of model there must be some value in it.</p>
</section>
<section id="running-the-different-scenarios" class="level1">
<h1>Running the Different Scenarios</h1>
<p>For the summerschool, I developed a little web application called <a href="../../../incertae/">Incertae</a> and which allows you to run the scenarios from a browser. Just <a href="../../../incertae/">try it</a> for yourself!</p>
<p>In order to make sense of the scenarios, let’s walk through this step by step…</p>
<section id="step-1-no-randomness" class="level2">
<h2 class="anchored" data-anchor-id="step-1-no-randomness">Step 1: No Randomness</h2>
<p>By clicking on the parameters of the simulation, or below in the footer on the words <em>can be changed</em>, the simulation settings can be adjusted.</p>
<p>Set the variables such that there is no randomness applied to the scenario. Only one scenario is sufficient in this case:</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/incertae-step1-settings-small.png" class="img-fluid"></p>
<p>And see what the result looks like:</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/incertae-step1-result-small.png" class="img-fluid"></p>
</section>
<section id="step-2-a-bit-of-randomness" class="level2">
<h2 class="anchored" data-anchor-id="step-2-a-bit-of-randomness">Step 2: A bit of Randomness</h2>
<p>In step 2, we add a bit of randomness. For this we use the default settings, although you could increase the number of scenarios if you wanted to:</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/incertae-step2-settings-small.png" class="img-fluid"></p>
<p>The result should look similar to the following. Please note that randomness has been added, so your result should not look exactly like the one presented here!</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/incertae-step2-result-small.png" class="img-fluid"></p>
</section>
<section id="step-3-a-bit-more-randomness" class="level2">
<h2 class="anchored" data-anchor-id="step-3-a-bit-more-randomness">Step 3: A bit more Randomness</h2>
<p>In step 3, we increase the amount of randomness added to the scenarios. For instance:</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/incertae-step3-settings-small.png" class="img-fluid"></p>
<p>Now, given more randomness in the scenarios, yours might be completely different from the one below:</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/incertae-step3-result-small.png" class="img-fluid"></p>
</section>
</section>
<section id="discussion" class="level1">
<h1>Discussion</h1>
<p>To be continued</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>web</category>
  <category>math</category>
  <category>visualization</category>
  <category>model error</category>
  <category>fat tails</category>
  <guid>https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/index.html</guid>
  <pubDate>Thu, 06 Sep 2018 10:00:00 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/blog/2018-09-06-a-practical-approach-to-model-error-part-2/incertae-step3-result-small.png" medium="image" type="image/png" height="63" width="144"/>
</item>
<item>
  <title>Viz and Math in Apache Zeppelin</title>
  <link>https://www.data-intuitive.com/insights/blog/2016-10-27-viz-and-math-in-apache-zeppelin/index.html</link>
  <description><![CDATA[ 



<p>For some years, I have been going back an forth between <a href="http://spark-notebook.io/">Spark-Notebook</a> and <a href="https://zeppelin.apache.org/">Apache Zeppelin</a> for different use-cases. Already 2 years ago, I made <a href="http://www.slideshare.net/ToniVerbeiren/getting-data-analysis-to-the-user">a little comparison</a> of the two technologies.</p>
<p>I used Spark-Notebook in order to do develop the code necessary to write <a href="../../../2016/05/a-practical-approach-to-model-error">the post about model error</a>. It came in handy that Spark-Notebook supports math notation in Markdown out-of-the-box. Zeppelin does not do that.</p>
<p>On the other hand, I have never been fond of the graphics support in Spark-Notebook. Zeppelin has some interesting functionality by default, including the ability to pivot data tables. But it still is too limited for customized charts and visualizations.</p>
<p>Now, luckily, both the visualization aspect and math support can easily be solved.</p>
<section id="math-support" class="level2">
<h2 class="anchored" data-anchor-id="math-support">Math support</h2>
<p>Support math notation is as easy as inserting a cell with the following content:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1">%angular</span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">&lt;script</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;">&lt;/script&gt;</span></span></code></pre></div>
<p>A markdown formatted cell looks like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><span class="fu" style="color: #4758AB;"># Introduction</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">I don't want to discuss the biology of a virus or its spreading, even though virus spreading is the topic of the simulation we're about to do. I invite you to look <span class="co" style="color: #5E5E5E;">[</span><span class="ot" style="color: #003B4F;">elsewhere</span><span class="co" style="color: #5E5E5E;">](http://arxiv.org/abs/1411.1472)</span> for that.</span>
<span id="cb2-4"></span>
<span id="cb2-5">We mainly want to get a feel for the main message Taleb's argument in his analysis linked above: The dangers of basing decisions on simple models for the spreading of virusses and the lack discussing the risks involved in analysing these models.</span>
<span id="cb2-6"></span>
<span id="cb2-7">We do this by modelling the spreading of a virus by means of a simple <span class="co" style="color: #5E5E5E;">[</span><span class="ot" style="color: #003B4F;">geometric Brownian motion</span><span class="co" style="color: #5E5E5E;">](https://en.wikipedia.org/wiki/Geometric_Brownian_motion)</span> process. It's the same process that is used in the (in)famous <span class="co" style="color: #5E5E5E;">[</span><span class="ot" style="color: #003B4F;">Black-Scholes model</span><span class="co" style="color: #5E5E5E;">](https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model)</span>.</span>
<span id="cb2-8"></span>
<span id="cb2-9">The differential form of the process is as follows:</span>
<span id="cb2-10"></span>
<span id="cb2-11">$$</span>
<span id="cb2-12">d S(t) = S(t) \mu dt + S(t) \sigma d W(t)</span>
<span id="cb2-13">$$</span></code></pre></div>
<p>This is an excerpt from the <a href="../../../2016/05/a-practical-approach-to-model-error">post on model error</a>. Please note that the <code>$$</code> symbols are on a line of their own. This is to avoid that Zeppelin renders math in the input field itself.</p>
<p>The following screenshot shows this in action in Zeppelin:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.data-intuitive.com/insights/blog/2016-10-27-viz-and-math-in-apache-zeppelin/zeppelin-mathjax.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Mathjax in Zeppelin</figcaption><p></p>
</figure>
</div>
<p>Oh, yes, you might need to refresh the notebook in order for the rendering to take effect.</p>
</section>
<section id="vis" class="level2">
<h2 class="anchored" data-anchor-id="vis">Vis</h2>
<p>Zeppelin has an <a href="https://zeppelin.apache.org/docs/0.6.2/displaysystem/basicdisplaysystem.html#table">interesting approach</a> to visualization already. It offers basic types of plots. Unfortunately, these plots are often not sufficient. Especially when one wants to <a href="https://zeppelin.apache.org/docs/0.6.2/manual/publish.html">provision dashboards</a> based on notebook content.</p>
<p>Of course, one can use <code>R</code> and Python in Zeppelin, and even interchange data between contexts so that plotting could be done using <a href="http://ggplot2.org/">ggplot2</a> or <a href="http://matplotlib.org/">matplotlib</a>. But it remains a hassle to use, and not all of these interpreter are always installed in every instance of Zeppelin.</p>
<p>There are a number of Scala plotting libraries, but none that convinced me up till now. Until <a href="https://github.com/vegas-viz/Vegas">Vegas</a> came around. It is based on <a href="https://vega.github.io/vega-lite/">vega-lite</a> and offers an API for Scala/Spark. I have done custom visualizations in Zeppelin and Spark-Notebook before, but those involved including additional javascript libraries. Vegas does not require a custom build. It can be used like this:</p>
<p>Fetch the binary package:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">%</span>dep</span>
<span id="cb3-2">z<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">load</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"org.vegas-viz:vegas_2.11:0.3.6"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p>Import the necessary classes:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb4-1"><span class="kw" style="color: #003B4F;">import</span> vegas<span class="op" style="color: #5E5E5E;">.</span>_</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">import</span> vegas<span class="op" style="color: #5E5E5E;">.</span>render<span class="op" style="color: #5E5E5E;">.</span>HTMLRenderer<span class="op" style="color: #5E5E5E;">.</span>_</span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">implicit</span> <span class="kw" style="color: #003B4F;">val</span> displayer<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">String</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> <span class="bu" style="color: null;">Unit</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> s <span class="op" style="color: #5E5E5E;">=&gt;</span> <span class="fu" style="color: #4758AB;">print</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"%html "</span> <span class="op" style="color: #5E5E5E;">+</span> s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>And plot the data:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb5-1"><span class="kw" style="color: #003B4F;">val</span> plot <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">Vegas</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Country Pop"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-2">                <span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">withData</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb5-3">                    <span class="bu" style="color: null;">Seq</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb5-4">                        <span class="ex" style="color: null;">Map</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"country"</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="st" style="color: #20794D;">"USA"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"population"</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dv" style="color: #AD0000;">314</span><span class="op" style="color: #5E5E5E;">),</span></span>
<span id="cb5-5">                        <span class="ex" style="color: null;">Map</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"country"</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="st" style="color: #20794D;">"UK"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"population"</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">),</span></span>
<span id="cb5-6">                        <span class="ex" style="color: null;">Map</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"country"</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="st" style="color: #20794D;">"DK"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"population"</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dv" style="color: #AD0000;">80</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-7">                    <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-8">                 <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-9">                <span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">encodeX</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"country"</span><span class="op" style="color: #5E5E5E;">,</span> Nom<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-10">                <span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">encodeY</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"population"</span><span class="op" style="color: #5E5E5E;">,</span> Quant<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-11">                <span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mark</span><span class="op" style="color: #5E5E5E;">(</span>Bar<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-12">                <span class="op" style="color: #5E5E5E;">.</span>show</span></code></pre></div>
<p>Please not that <code>withData</code> takes a <code>Seq</code> of <code>Map</code>, contrary to what is stated on the <a href="https://github.com/vegas-viz/Vegas">github</a> page.</p>
<p>The following screenshot shows this running:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.data-intuitive.com/insights/blog/2016-10-27-viz-and-math-in-apache-zeppelin/zeppelin-vegas.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Vegas in Zeppelin</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>data science</category>
  <category>Zeppelin</category>
  <category>Spark-Notebook</category>
  <category>math</category>
  <category>visualization</category>
  <guid>https://www.data-intuitive.com/insights/blog/2016-10-27-viz-and-math-in-apache-zeppelin/index.html</guid>
  <pubDate>Thu, 27 Oct 2016 08:29:14 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/blog/2016-10-27-viz-and-math-in-apache-zeppelin/zeppelin-mathjax.png" medium="image" type="image/png" height="88" width="144"/>
</item>
<item>
  <title>Data Intuitive at Spark Summit 2016</title>
  <link>https://www.data-intuitive.com/insights/blog/2016-10-26-data-intuitive-at-spark-summit-2016/index.html</link>
  <description><![CDATA[ 



<section id="short-version" class="level1">
<h1>Short version</h1>
<p>No, I’m not at the <a href="https://spark-summit.org/eu-2016">spark summit</a> in Brussels. Time is not on my side, too much things to do.</p>
<p>But, being there is not necessary when other people make sure they do the publicity for you.</p>
<p>Thank you <a href="https://spark-summit.org/eu-2016/speakers/miel-hostens/">Miel Hostens</a>!</p>
</section>
<section id="longer-version" class="level1">
<h1>Longer version</h1>
<p>About two years ago, I gave <a href="http://www.meetup.com/Spark-Belgium/events/222632697/">a presentation</a> at the first Spark Meetup in Belgium. It’s when I met Miel. I think it is fair to say that the architecture and application I was describing back then (and which is still under active development) made Miel realize that what he wanted to achieve was possible.</p>
<p>The talk used to be available as a video, but the link is no longer active. The slides, however, <a href="http://www.slideshare.net/ToniVerbeiren/getting-data-analysis-to-the-user">can be fetched here</a>.</p>
<p>Miel and I have stayed in contact. I’m happy he can get his message across. And I’m happy of course I have played a role in this.</p>


</section>

 ]]></description>
  <category>spark</category>
  <category>Data Science</category>
  <guid>https://www.data-intuitive.com/insights/blog/2016-10-26-data-intuitive-at-spark-summit-2016/index.html</guid>
  <pubDate>Wed, 26 Oct 2016 07:39:05 GMT</pubDate>
</item>
<item>
  <title>Bullet Proof Data Science in Scala</title>
  <link>https://www.data-intuitive.com/insights/blog/2016-06-25-bullet-proof-data-analysis-in-scala/index.html</link>
  <description><![CDATA[ 



<p>In this post, we go over some typical aspects and challenges that occur in typical data science projects in order to extract some requirements for data analysis in the broad sense of the word. We then illustrate how we tackle these requirements in typical data science projects using Scala.</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<section id="joining-and-annotations" class="level2">
<h2 class="anchored" data-anchor-id="joining-and-annotations">Joining and Annotations</h2>
<p>The reality is that often times several data sources need to be aggregated. Aggregation can be in two ways/directions:</p>
<ol type="1">
<li><em>Vertical</em>: New data, similar to what we already have, and</li>
<li><em>Horizontal</em>: Additional information about data we already obtained.</li>
</ol>
</section>
<section id="parsing-libraries" class="level2">
<h2 class="anchored" data-anchor-id="parsing-libraries">Parsing Libraries</h2>
<p>Last week I was parsing a tab-separated file with information about genomic variants (aka a <a href="https://github.com/tmoerman/vcf-comp">VCF file</a>). The parsing was done using a <a href="https://github.com/tmoerman/adam-fx">custom library</a> created by a colleague of mine. I had uses the library before, but now suddenly it did not work anymore. All I got was a <a href="https://plus.google.com/u/0/photos/albums/pgjn4t8o2070opjbq27bm8tg97jig4pu5?pid=6293736964412074498&amp;oid=108837720006806497269">confusing error about some exception</a>:</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2016-06-25-bullet-proof-data-analysis-in-scala/https:/lh4.googleusercontent.com/-Hsj5FX-c8Q0/V1fYbGmG6gI/AAAAAAAAI3s/i-vrYvoslC0IPUxgRzJWHy9Ib8WlJ3nhgCL0B/w1065-h383-no/2016-06-08.png" class="img-fluid"></p>
<p>And then, the fun starts. How to find out where things go wrong and how to make sure you don’t have to rewrite (part of) the parser? It turned out additional fields can be added to a VCF format file, which the parser does not take into account.</p>
</section>
<section id="missing-values" class="level2">
<h2 class="anchored" data-anchor-id="missing-values">Missing Values</h2>
<p>A similar issue occurs when dealing with missing values, or missing columns in the data. It’s very easy to end up with exceptions in the Scala/Java world or equivalent in other languages.</p>
<p>The challenge of missing data becomes even more concrete when additional data is aggregated. Suppose we have additional annotations about a subset of the data. There needs to be a way to cover situations like this.</p>
</section>
<section id="solving-the-challenge-in-scala" class="level2">
<h2 class="anchored" data-anchor-id="solving-the-challenge-in-scala">Solving the Challenge in Scala</h2>
<p>In other words, you don’t have control over the input in most cases. In what follows, we describe an approach to data analysis in <a href="http://www.scala-lang.org/">Scala</a> that takes into account the above challenges. The approach is heavily based on principles of <a href="https://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a> while capturing the data model in an object model.</p>
</section>
</section>
<section id="bullet-proof-data-science" class="level1">
<h1>Bullet Proof Data Science</h1>
<section id="missing-values-1" class="level2">
<h2 class="anchored" data-anchor-id="missing-values-1">Missing Values</h2>
<p>On important aspect of the above challenges is missing values. Say you’re a service organization that keeps records of potential customers. Furthermore, say you want to analyze people’s hobbies. You would like to allow for a distinction between 3 situations:</p>
<ol type="1">
<li>There is no information about the customer’s hobbies</li>
<li>The customer does not have any hobbies</li>
<li>The customer has 1 or more hobbies</li>
</ol>
<p>Say you encode the hobbies as a <code>List</code> of <code>String</code> (free form), then (2) corresponds to an empty list and (3) corresponds to a list of <em>n</em> hobbies. But what does (1) correspond to? In R, one usually gets <code>NA</code>. In Java, one would often sees the occurrence of <code>null</code>, but using <code>null</code> is not a <a href="http://blog.scalac.io/2015/05/31/dealing-with-npe.html">good</a> <a href="http://alvinalexander.com/scala/scala-null-values-option-uninitialized-variables">habit</a>.</p>
<p>Instead, we use the <code>Option</code> type. It encapsulates whatever other data structure you want. The above 3 situations then correspond to:</p>
<ol type="1">
<li><code>None</code> for no hobbies known about this person</li>
<li><code>Some(List())</code> for this person does not have hobbies</li>
<li><code>Some(List(hobby1, hobby2, ...))</code> for the hobbies for this person</li>
</ol>
<p>For the FP (Functional Programming) people among us, the option is a Monad. But let’s not go there yet in order not to scare off the others…</p>
</section>
<section id="start-with-the-end-in-mind" class="level2">
<h2 class="anchored" data-anchor-id="start-with-the-end-in-mind">Start with the End in Mind</h2>
<p>In our experience, it makes sense to define a good model for the data after aggregation and processing and capture this in an object model. This model need to be the one that can be used as input for a machine learning library as such, but it should capture the logic of the application domain.</p>
<p>And Scala’s <code>case</code> classes come in very handy. We will not cover the specifics or benefits of case classes here, but remember this: always put <code>case</code> in front of your class definition. Oh, and while you’re at it, add <code>val</code> before every class parameter as well.</p>
<p>For instance, and to be in line with the discussion above, we could define a <code>Name</code> class definition as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb1-1"><span class="cf" style="color: #003B4F;">case</span> <span class="kw" style="color: #003B4F;">class</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">val</span> firstName<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">],</span> <span class="kw" style="color: #003B4F;">val</span> lastName<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">])</span></span></code></pre></div>
<p>One can add safe getters and setters if necessary:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb2-1"><span class="cf" style="color: #003B4F;">case</span> <span class="kw" style="color: #003B4F;">class</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">val</span> firstName<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">],</span> </span>
<span id="cb2-2">                <span class="kw" style="color: #003B4F;">val</span> lastName<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;">def</span> getSafeFirstName <span class="op" style="color: #5E5E5E;">=</span> firstName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">getOrElse</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"First name not known"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;">def</span> getSafeLastName  <span class="op" style="color: #5E5E5E;">=</span> lastName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">getOrElse</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Last name not known"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>Please note that the safe getters return a <code>String</code>, even if the value is not available.</p>
</section>
<section id="safe-transformation" class="level2">
<h2 class="anchored" data-anchor-id="safe-transformation">Safe transformation</h2>
<p>Once we encapsulated the data in an <code>Option</code>, we can safely process this data as well. There are multiple way to do this, but all come down to the same principle:</p>
<ol type="1">
<li>Only process <em>values</em> that should be processed, so don’t process missing entries, and</li>
<li>Make sure the processing itself is <em>safe</em> by catching exceptions where necessary.</li>
</ol>
<p>Coming back to our example: In practice one seldom gets a dataset with first name and last name clearly split. We could store input as well, and define a companion object in order for people to easily use the API:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb3-1"><span class="cf" style="color: #003B4F;">case</span> <span class="kw" style="color: #003B4F;">class</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">val</span> unparsed<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">],</span> </span>
<span id="cb3-2">                <span class="kw" style="color: #003B4F;">val</span> firstName<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]=</span><span class="bu" style="color: null;">None</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-3">                <span class="kw" style="color: #003B4F;">val</span> lastName<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]=</span><span class="bu" style="color: null;">None</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">object</span> <span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">apply</span><span class="op" style="color: #5E5E5E;">(</span>unparsedStr<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>unparsedStr<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">apply</span><span class="op" style="color: #5E5E5E;">(</span>unparsedStr<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">,</span> fnStr<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">,</span> lnStr<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-8">        <span class="kw" style="color: #003B4F;">new</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>unparsedStr<span class="op" style="color: #5E5E5E;">),</span> <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>fnStr<span class="op" style="color: #5E5E5E;">),</span> <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>lnStr<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-10"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We used default values for the first and last name. Imagine now what you can do with an object model like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb4-1"><span class="kw" style="color: #003B4F;">val</span> name1BeforeParsing <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"John Doo"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">val</span> name2BeforeParsing <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Bar Foo"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">val</span> name3BeforeParsing <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Franz Octupus"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// A very crude parsing function</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">parseName</span><span class="op" style="color: #5E5E5E;">(</span>in<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">):</span><span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;">val</span> names <span class="op" style="color: #5E5E5E;">=</span> in<span class="op" style="color: #5E5E5E;">.</span>unparsed<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">map</span><span class="op" style="color: #5E5E5E;">(</span>_<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">split</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">" "</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb4-8">    in<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">copy</span><span class="op" style="color: #5E5E5E;">(</span>firstName <span class="op" style="color: #5E5E5E;">=</span> names<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">map</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">_</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)),</span> lastName <span class="op" style="color: #5E5E5E;">=</span> names<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">map</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">_</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb4-9"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;">val</span> name1 <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">parseName</span><span class="op" style="color: #5E5E5E;">(</span>name1BeforeParsing<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb4-12"><span class="kw" style="color: #003B4F;">val</span> name2 <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">parseName</span><span class="op" style="color: #5E5E5E;">(</span>name2BeforeParsing<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;">val</span> listOfPersons <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">List</span><span class="op" style="color: #5E5E5E;">(</span>name1<span class="op" style="color: #5E5E5E;">,</span> name2<span class="op" style="color: #5E5E5E;">,</span> name3BeforeParsing<span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p>Now, obviously there are lots of problems with this approach to parsing the name. One could improve this in many ways. For instance, we did not take into account a middle name. One approach to improve the parsing itself could be to use a database of common first names and last names. But that’s not the aim of this post. So let us continue with the important stuff here. Let us convert all first names to initials in a safe way:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">getInitials</span><span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">):</span><span class="ex" style="color: null;">String</span> <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span>toCharArray<span class="op" style="color: #5E5E5E;">.</span>head<span class="op" style="color: #5E5E5E;">.</span>toString<span class="op" style="color: #5E5E5E;">.</span>toUpperCase <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"."</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">firstNameToInitials</span><span class="op" style="color: #5E5E5E;">(</span>name<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">):</span><span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">=</span> name<span class="op" style="color: #5E5E5E;">.</span>firstName <span class="cf" style="color: #003B4F;">match</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;">case</span> <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>nameString<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> name<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">copy</span><span class="op" style="color: #5E5E5E;">(</span>firstName <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">getInitials</span><span class="op" style="color: #5E5E5E;">(</span>nameString<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb5-5">        <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;">case</span> <span class="bu" style="color: null;">None</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> name</span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>The result is as follows:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb6-1">listOfPersons<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">map</span><span class="op" style="color: #5E5E5E;">(</span>firstNameToInitials<span class="op" style="color: #5E5E5E;">).</span>foreach<span class="op" style="color: #5E5E5E;">{</span>println<span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-2"><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>John Doo<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>J<span class="op" style="color: #5E5E5E;">.),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Doo<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb6-3"><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Bar Foo<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>B<span class="op" style="color: #5E5E5E;">.),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Foo<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb6-4"><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Franz Octupus<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">None</span><span class="op" style="color: #5E5E5E;">,</span><span class="bu" style="color: null;">None</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p>See how the function gracefully managed to pass over nonexistent values! The initials of nothing is still nothing. It does not end here, though, because we managed to cope with missing values, but we did not yet make the transformation fully bullet proof! See what happens in the following case:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb7-1"><span class="fu" style="color: #4758AB;">firstNameToInitials</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">parseName</span><span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Jacobus"</span><span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb7-2">java<span class="op" style="color: #5E5E5E;">.</span>util<span class="op" style="color: #5E5E5E;">.</span><span class="ex" style="color: null;">NoSuchElementException</span><span class="op" style="color: #5E5E5E;">:</span> next on empty iterator</span>
<span id="cb7-3">  at scala<span class="op" style="color: #5E5E5E;">.</span>collection<span class="op" style="color: #5E5E5E;">.</span>Iterator$$anon$<span class="fl" style="color: #AD0000;">2.</span><span class="fu" style="color: #4758AB;">next</span><span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">Iterator</span><span class="op" style="color: #5E5E5E;">.</span>scala<span class="op" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">39</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-4">  at scala<span class="op" style="color: #5E5E5E;">.</span>collection<span class="op" style="color: #5E5E5E;">.</span>Iterator$$anon$<span class="fl" style="color: #AD0000;">2.</span><span class="fu" style="color: #4758AB;">next</span><span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">Iterator</span><span class="op" style="color: #5E5E5E;">.</span>scala<span class="op" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">37</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-5">  at scala<span class="op" style="color: #5E5E5E;">.</span>collection<span class="op" style="color: #5E5E5E;">.</span>IndexedSeqLike$Elements<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">next</span><span class="op" style="color: #5E5E5E;">(</span>IndexedSeqLike<span class="op" style="color: #5E5E5E;">.</span>scala<span class="op" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">63</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-6">  at scala<span class="op" style="color: #5E5E5E;">.</span>collection<span class="op" style="color: #5E5E5E;">.</span>IterableLike$class<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">head</span><span class="op" style="color: #5E5E5E;">(</span>IterableLike<span class="op" style="color: #5E5E5E;">.</span>scala<span class="op" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">107</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-7">  at scala<span class="op" style="color: #5E5E5E;">.</span>collection<span class="op" style="color: #5E5E5E;">.</span>mutable<span class="op" style="color: #5E5E5E;">.</span>ArrayOps$ofChar<span class="op" style="color: #5E5E5E;">.</span>scala$collection$IndexedSeqOptimized$$super$<span class="fu" style="color: #4758AB;">head</span><span class="op" style="color: #5E5E5E;">(</span>ArrayOps<span class="op" style="color: #5E5E5E;">.</span>scala<span class="op" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">222</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-8">  at scala<span class="op" style="color: #5E5E5E;">.</span>collection<span class="op" style="color: #5E5E5E;">.</span>IndexedSeqOptimized$class<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">head</span><span class="op" style="color: #5E5E5E;">(</span>IndexedSeqOptimized<span class="op" style="color: #5E5E5E;">.</span>scala<span class="op" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">126</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-9">  at scala<span class="op" style="color: #5E5E5E;">.</span>collection<span class="op" style="color: #5E5E5E;">.</span>mutable<span class="op" style="color: #5E5E5E;">.</span>ArrayOps$ofChar<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">head</span><span class="op" style="color: #5E5E5E;">(</span>ArrayOps<span class="op" style="color: #5E5E5E;">.</span>scala<span class="op" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">222</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-10">  at <span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">firstNameToInitials</span><span class="op" style="color: #5E5E5E;">(&lt;</span>console<span class="op" style="color: #5E5E5E;">&gt;:</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-11">  <span class="op" style="color: #5E5E5E;">...</span> <span class="dv" style="color: #AD0000;">33</span> elided</span></code></pre></div>
<p>An easy way to solve this, and one that is compatible with our approach thus far is by using <code>Try</code> in Scala. You have two choices now, which depend on how you want the API to work:</p>
<ol type="1">
<li>When an exception occurs during the transformation, let the result be <code>None</code>. So in other words, let it correspond to a missing value.</li>
<li>When an exception occurs, insert a default value</li>
</ol>
<p>Both scenarios are shown below:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb8-1"><span class="kw" style="color: #003B4F;">import</span> scala<span class="op" style="color: #5E5E5E;">.</span>util<span class="op" style="color: #5E5E5E;">.</span>Try</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">val</span> DEFAULT<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">String</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">getInitialsDefault</span><span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">):</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-6">    <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">Try</span><span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">.</span>toCharArray<span class="op" style="color: #5E5E5E;">.</span>head<span class="op" style="color: #5E5E5E;">.</span>toString<span class="op" style="color: #5E5E5E;">.</span>toUpperCase <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"."</span><span class="op" style="color: #5E5E5E;">).</span>toOption<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">getOrElse</span><span class="op" style="color: #5E5E5E;">(</span>DEFAULT<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">getInitialsOption</span><span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">):</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-10">    <span class="fu" style="color: #4758AB;">Try</span><span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">.</span>toCharArray<span class="op" style="color: #5E5E5E;">.</span>head<span class="op" style="color: #5E5E5E;">.</span>toString<span class="op" style="color: #5E5E5E;">.</span>toUpperCase <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"."</span><span class="op" style="color: #5E5E5E;">).</span>toOption</span>
<span id="cb8-11"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-12"></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">firstNameToInitials</span><span class="op" style="color: #5E5E5E;">(</span>name<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb8-15">                        getInitialF<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">=&gt;</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]):</span><span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-16">    name<span class="op" style="color: #5E5E5E;">.</span>firstName <span class="cf" style="color: #003B4F;">match</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-17">        <span class="cf" style="color: #003B4F;">case</span> <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>nameString<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> name<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">copy</span><span class="op" style="color: #5E5E5E;">(</span>firstName <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">getInitialF</span><span class="op" style="color: #5E5E5E;">(</span>nameString<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb8-18">        <span class="cf" style="color: #003B4F;">case</span> <span class="bu" style="color: null;">None</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> name</span>
<span id="cb8-19">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-20"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>And use it as follows:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb9-1"><span class="fu" style="color: #4758AB;">firstNameToInitials</span><span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"def"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"def"</span><span class="op" style="color: #5E5E5E;">),</span> getInitialsDefault _<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb9-2">res<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">def</span><span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">def</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;">firstNameToInitials</span><span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"def"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"def"</span><span class="op" style="color: #5E5E5E;">),</span> getInitialsOption _<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb9-5">res<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">def</span><span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">None</span><span class="op" style="color: #5E5E5E;">,</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">def</span><span class="op" style="color: #5E5E5E;">))</span></span></code></pre></div>
<p>By now, the FP adepts give us 1 point for keeping our data structures immutable: the above functions do not mutate the <code>name</code> object, but rather instantiate a new one.</p>
<p>But we receive a <em>negative score</em> on omitting to acknowledge that <code>Option</code> is a Monad and that a much better way of writing the above exists:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb10-1"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">getInitialsDefault2</span><span class="op" style="color: #5E5E5E;">(</span>name<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]):</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> </span>
<span id="cb10-2">    name<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">map</span><span class="op" style="color: #5E5E5E;">(</span> s <span class="op" style="color: #5E5E5E;">=&gt;</span> <span class="fu" style="color: #4758AB;">Try</span><span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">.</span>toCharArray<span class="op" style="color: #5E5E5E;">.</span>head<span class="op" style="color: #5E5E5E;">.</span>toString<span class="op" style="color: #5E5E5E;">.</span>toUpperCase <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"."</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">getOrElse</span><span class="op" style="color: #5E5E5E;">(</span>DEFAULT<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">getInitialsOption2</span><span class="op" style="color: #5E5E5E;">(</span>name<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]):</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> </span>
<span id="cb10-5">    name<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">flatMap</span><span class="op" style="color: #5E5E5E;">(</span> s <span class="op" style="color: #5E5E5E;">=&gt;</span> <span class="fu" style="color: #4758AB;">Try</span><span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">.</span>toCharArray<span class="op" style="color: #5E5E5E;">.</span>head<span class="op" style="color: #5E5E5E;">.</span>toString<span class="op" style="color: #5E5E5E;">.</span>toUpperCase <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"."</span><span class="op" style="color: #5E5E5E;">).</span>toOption<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">firstNameToInitials2</span><span class="op" style="color: #5E5E5E;">(</span>name<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb10-8">                         getInitialF<span class="op" style="color: #5E5E5E;">:</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]=&gt;</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]):</span><span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-9">    name<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">copy</span><span class="op" style="color: #5E5E5E;">(</span>firstName <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">getInitialF</span><span class="op" style="color: #5E5E5E;">(</span>name<span class="op" style="color: #5E5E5E;">.</span>firstName<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-10"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>These functions do not exactly do the same as the earlier functions, but they illustrate a very important concept: <code>map</code> or <code>flatMap</code> on <code>None</code> results in <code>None</code>. So, there is no need to explicitly use pattern matching here. In order to parse the list of names, we simply <code>map</code> over it (indentation added for ease of reading):</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb11-1">listOfPersons<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">map</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">firstNameToInitials2</span><span class="op" style="color: #5E5E5E;">(</span>_<span class="op" style="color: #5E5E5E;">,</span> getInitialsDefault2<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb11-2">res<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">List</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">List</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb11-3">                    <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>John Doo<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>J<span class="op" style="color: #5E5E5E;">.),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Doo<span class="op" style="color: #5E5E5E;">)),</span> </span>
<span id="cb11-4">                    <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Bar Foo<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>B<span class="op" style="color: #5E5E5E;">.),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Foo<span class="op" style="color: #5E5E5E;">)),</span> </span>
<span id="cb11-5">                    <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Franz Octupus<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">None</span><span class="op" style="color: #5E5E5E;">,</span><span class="bu" style="color: null;">None</span><span class="op" style="color: #5E5E5E;">))</span></span></code></pre></div>
<p>For a nice and graphical introduction to Monads and related concepts, I recommend the following <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">blog post</a>. Transformations like the above can be composed in a bullet-proof way, once a missing value or exception occurs, we either continue with a default value or with <code>None</code>.</p>
<p>We can go a bit further still for the FP fanatics among us. The function <code>firstNameToInitials</code> in fact is <em>the setter</em> part of what is called <a href="http://koff.io/posts/292173-lens-in-scala/">a <code>Lens</code></a>. We will come back to this later in this post.</p>
</section>
<section id="immutability-and-lenses" class="level2">
<h2 class="anchored" data-anchor-id="immutability-and-lenses">Immutability and Lenses</h2>
<p>Please note the examples above do not <em>mutate</em> any objects. We use the <code>copy</code> method to create an updated version of an object. We will not discuss the benefits of this kind of programming, but just mention the use of a Lens in order to <em>update</em> an immutable data structure.</p>
<p>Several libraries exist for working with Lenses, some based on Scala macros others more high-level. For the sake of the argument, we lift the <code>Lens</code> definition out the <a href="https://github.com/scalaz/scalaz">Scalaz</a> project:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb12-1"><span class="cf" style="color: #003B4F;">case</span> <span class="kw" style="color: #003B4F;">class</span> Lens<span class="op" style="color: #5E5E5E;">[</span>A<span class="op" style="color: #5E5E5E;">,</span>B<span class="op" style="color: #5E5E5E;">](</span>get<span class="op" style="color: #5E5E5E;">:</span> A <span class="op" style="color: #5E5E5E;">=&gt;</span> B<span class="op" style="color: #5E5E5E;">,</span> set<span class="op" style="color: #5E5E5E;">:</span> <span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">,</span>B<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> A<span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">extends</span> Function1<span class="op" style="color: #5E5E5E;">[</span>A<span class="op" style="color: #5E5E5E;">,</span>B<span class="op" style="color: #5E5E5E;">]</span> <span class="kw" style="color: #003B4F;">with</span> Immutable <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-2">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">apply</span><span class="op" style="color: #5E5E5E;">(</span>whole<span class="op" style="color: #5E5E5E;">:</span> A<span class="op" style="color: #5E5E5E;">):</span> B   <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">get</span><span class="op" style="color: #5E5E5E;">(</span>whole<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">updated</span><span class="op" style="color: #5E5E5E;">(</span>whole<span class="op" style="color: #5E5E5E;">:</span> A<span class="op" style="color: #5E5E5E;">,</span> part<span class="op" style="color: #5E5E5E;">:</span> B<span class="op" style="color: #5E5E5E;">):</span> A <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">set</span><span class="op" style="color: #5E5E5E;">(</span>whole<span class="op" style="color: #5E5E5E;">,</span> part<span class="op" style="color: #5E5E5E;">)</span> <span class="co" style="color: #5E5E5E;">// like on immutable maps</span></span>
<span id="cb12-4">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">mod</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">:</span> A<span class="op" style="color: #5E5E5E;">,</span> f<span class="op" style="color: #5E5E5E;">:</span> B <span class="op" style="color: #5E5E5E;">=&gt;</span> B<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">set</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">,</span> <span class="fu" style="color: #4758AB;">f</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb12-5">  <span class="kw" style="color: #003B4F;">def</span> compose<span class="op" style="color: #5E5E5E;">[</span>C<span class="op" style="color: #5E5E5E;">](</span>that<span class="op" style="color: #5E5E5E;">:</span> Lens<span class="op" style="color: #5E5E5E;">[</span>C<span class="op" style="color: #5E5E5E;">,</span>A<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">=</span> Lens<span class="op" style="color: #5E5E5E;">[</span>C<span class="op" style="color: #5E5E5E;">,</span>B<span class="op" style="color: #5E5E5E;">](</span></span>
<span id="cb12-6">    c <span class="op" style="color: #5E5E5E;">=&gt;</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">that</span><span class="op" style="color: #5E5E5E;">(</span>c<span class="op" style="color: #5E5E5E;">)),</span></span>
<span id="cb12-7">    <span class="op" style="color: #5E5E5E;">(</span>c<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> that<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mod</span><span class="op" style="color: #5E5E5E;">(</span>c<span class="op" style="color: #5E5E5E;">,</span> <span class="fu" style="color: #4758AB;">set</span><span class="op" style="color: #5E5E5E;">(</span>_<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb12-8">  <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-9">  <span class="kw" style="color: #003B4F;">def</span> andThen<span class="op" style="color: #5E5E5E;">[</span>C<span class="op" style="color: #5E5E5E;">](</span>that<span class="op" style="color: #5E5E5E;">:</span> Lens<span class="op" style="color: #5E5E5E;">[</span>B<span class="op" style="color: #5E5E5E;">,</span>C<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">=</span> that compose <span class="kw" style="color: #003B4F;">this</span></span>
<span id="cb12-10"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>A lens for first name can then be defined as such:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb13-1"><span class="kw" style="color: #003B4F;">val</span> aLens <span class="op" style="color: #5E5E5E;">=</span> Lens<span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">,</span><span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]](</span></span>
<span id="cb13-2">    _<span class="op" style="color: #5E5E5E;">.</span>firstName<span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb13-3">    <span class="op" style="color: #5E5E5E;">(</span>o<span class="op" style="color: #5E5E5E;">,</span> value<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">copy</span><span class="op" style="color: #5E5E5E;">(</span>firstName <span class="op" style="color: #5E5E5E;">=</span> value<span class="op" style="color: #5E5E5E;">))</span></span></code></pre></div>
<p>So, you provide two functions: a getter and a setter.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb14-1">aLens<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">get</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">listOfPersons</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb14-2">res<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Option</span><span class="op" style="color: #5E5E5E;">[</span><span class="ex" style="color: null;">String</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Bar<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb14-3"></span>
<span id="cb14-4">aLens<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">set</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">listOfPersons</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">),</span> <span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Barby"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb14-5">res<span class="op" style="color: #5E5E5E;">:</span> <span class="ex" style="color: null;">Name</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="ex" style="color: null;">Name</span><span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Bar Foo<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Barby<span class="op" style="color: #5E5E5E;">),</span><span class="bu" style="color: null;">Some</span><span class="op" style="color: #5E5E5E;">(</span>Foo<span class="op" style="color: #5E5E5E;">))</span></span></code></pre></div>
<p>In this case the usage of a lens is almost trivial because using the copy method on a class is an easy thing to do. But when you start to nest classes to create a more complicated model, multiple copy calls are required. Lenses are a good alternative in that case.</p>
</section>
<section id="bullet-proof-reading-of-data-sources" class="level2">
<h2 class="anchored" data-anchor-id="bullet-proof-reading-of-data-sources">Bullet Proof Reading of Data Sources</h2>
<p>The foundation of the bullet proof approach thus far clearly is the <code>Option</code> type, aka the <code>Maybe</code> Monad in Haskell. We already used <code>Try</code> to catch exceptions in a user-friendly and safe way.</p>
<p>Using <code>Try</code> while reading a file allows us to cope with missing values, columns or when transforming numbers encoded in strings to integers or floating point numbers. In every case, we have the option to cast the possible exceptions to <code>None</code> (missing value) or a default value.</p>
</section>
<section id="bullet-proof-aggregation-of-data-sources" class="level2">
<h2 class="anchored" data-anchor-id="bullet-proof-aggregation-of-data-sources">Bullet Proof Aggregation of Data Sources</h2>
<p>As mentioned already it is seldom the case that all data is available from one input file/database. Sometimes additional annotations need to be added (horizontal aggregation), coming from a different source. Sometimes, more data should be added which lacks certain features that the already parsed data contains (vertical aggregation).</p>
<p>There are several approaches to this. One is to go from one class-representation to another. But in this case, classes should be closely matched to the source of the data. We use a different approach, also making use of the (… tada! …) <code>Option</code> type.</p>
<p>Since a) the data ready for analytics should be in denormalized form, and b) we already have a model for that data that is able to cope with missing values, it is not hard to start from the data source that contains the most information about the denormalized form of the data. All fields/features that are not available in this first data source remain <code>None</code> (aka the default).</p>
<p>Adding additional features later can easily be done by <em>updating</em> the features from <code>None</code> to <code>Some(...)</code><sup>1</sup>. Adding additional data vertically can be done in the same way. It’s perfectly fine to end up with a data structure where most of the rows have <code>None</code> for a certain feature but some contain more information. And since our transformations are bullet proof, all runs safe.</p>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>To summarize:</p>
<ul>
<li>Start out with the object model that would be used when all available would be loaded</li>
<li>Use <code>Option</code> types for <em>all</em> fields in order to</li>
<li>Use default values <code>None</code> for data that is only later to be processed or loaded</li>
<li>Use the Monadic property of the <code>Option</code> type for easy manipulation</li>
<li>Use <code>Try</code> in combination with <code>Option</code>s for safe reading and transformation of data</li>
<li>From beginning to end, work with the same data model (using case classes) and fill in the blanks by updating <code>None</code> to <code>Some(...)</code>.</li>
</ul>
<p>… and of course …</p>
<ul>
<li>Update the data model, transformations, aggregations, etc. whenever necessary</li>
</ul>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This even reads nice!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Data Science</category>
  <category>Scala</category>
  <category>Missing Values</category>
  <category>Spark</category>
  <guid>https://www.data-intuitive.com/insights/blog/2016-06-25-bullet-proof-data-analysis-in-scala/index.html</guid>
  <pubDate>Sat, 25 Jun 2016 12:31:44 GMT</pubDate>
  <media:content url="https://lh4.googleusercontent.com/-Hsj5FX-c8Q0/V1fYbGmG6gI/AAAAAAAAI3s/i-vrYvoslC0IPUxgRzJWHy9Ib8WlJ3nhgCL0B/w1065-h383-no/2016-06-08.png" medium="image" type="image/png"/>
</item>
<item>
  <title>A Practical Approach to Model Error</title>
  <link>https://www.data-intuitive.com/insights/blog/2016-05-12-a-practical-approach-to-model-error/index.html</link>
  <description><![CDATA[ 



<p>In this post, I want to get a better sense of the effects of model error by simulating a very simple model for the spreading of a virus. It’s based on <a href="https://drive.google.com/file/d/0B8nhAlfIk3QIdlJNSXo1dkMzOVU/view">an analysis performed by Nassim Taleb</a>. I used the simulation below in the scope of a workshop paper <a href="http://decisive-workshop.dbvis.de/">on the effect of cognitive biases</a>. The <a href="http://nbn-resolving.de/urn:nbn:de:bsz:352-0-329490">published version</a> of the paper can be found <a href="https://kops.uni-konstanz.de/bitstream/handle/123456789/33726/Verbeiren_0-329490.pdf?sequence=3">here</a>.</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I don’t want to discuss the biology of a virus or its spreading, even though virus spreading is the topic of the simulation we’re about to do. I invite you to look <a href="http://arxiv.org/abs/1411.1472">elsewhere</a> for that.</p>
<p>We mainly want to get a feel for the main message Taleb’s argument in his analysis linked above: The dangers of basing decisions on simple models for the spreading of virusses and the lack discussing the risks involved in analysing these models.</p>
<p>We do this by modelling the spreading of a virus by means of a simple <a href="https://en.wikipedia.org/wiki/Geometric_Brownian_motion">geometric Brownian motion</a> process. It’s the same process that is used in the (in)famous <a href="https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model">Black-Scholes model</a>.</p>
<p>The differential form of the process is as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20d%20S(t)%20=%20S(t)%20%5Cmu%20dt%20+%20S(t)%20%5Csigma%20d%20W(t)%20%20"></p>
<p>In this formula, <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are generally referred to as respectively <em>drift</em> and <em>volatility</em>. <img src="https://latex.codecogs.com/png.latex?W(t)"> is a <a href="https://en.wikipedia.org/wiki/Wiener_process">Wiener process</a>, i.e.&nbsp;a continuous random walk.</p>
<p>Both <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> can be dependant on time or on the current state. But for the sake of the argument, this need not be the case.</p>
<p>We can discretize this stochastic differential equation simply by replacing the differentials <img src="https://latex.codecogs.com/png.latex?dt"> with small finite differences in time <img src="https://latex.codecogs.com/png.latex?%5CDelta%20t">. The Wiener process can be approximated by a random walk with finite <img src="https://latex.codecogs.com/png.latex?%5CDelta%20t"> as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5CDelta%20W(t)%20%5Capprox%20%5Csqrt%7B%5CDelta%20t%7D%20%5C,%20z%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?z"> is normally distributed with mean 0 and variance 1, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%20z%20%5Csim%5Cmathcal%7BN%7D%20(0,1)%20"></p>
<p>In other words, we can simulate a continous geometric Brownian motion process defined above by means of the following discretized version:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5CDelta%20S(t)%20=%20S(t)%20%5Cmu%20%5CDelta%20t%20+%20S(t)%20%5Csigma%20%5Csqrt%7B%5CDelta%20t%7D%20%5C,%20z%20%20"></p>
<p><a href="https://drive.google.com/file/d/0B8nhAlfIk3QIdlJNSXo1dkMzOVU/view">Taleb</a> uses a different representation of this formula, based on the solution of this equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20S(t%20+%20%5CDelta%20t)%20=%20S(t)%20%5Cexp%20%5Cleft%5B%20%5Cleft(%20%5Cmu%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cright)%20%5CDelta%20t%20%20+%20%5Csigma%20%5Csqrt%7B%5CDelta%20t%7D%20%5C,%20z%20%5Cright%5D%20"></p>
<p>Enough formulas for now, let us take a look at the simulation</p>
</section>
<section id="simulation-approach" class="level1">
<h1>Simulation Approach</h1>
<p>From a technical point of view, the simulation that follows in fact is run in a notebook run on <a href="http://spark-notebook.io">Spark-Notebook</a>. We started out developing an object-based representation of the problem, but quickly turned to a purely functional (recursive) approach since it is simpler to understand and reason about. We start, as Taleb does, from the assumption that every 20 days the number of infected people is doubled (doubling time of 20 days).</p>
<p>In a follow-up post, I may delve a little deeper in the actual implementation. Here, we want to focus on the results.</p>
</section>
<section id="non-stochastic-version" class="level1">
<h1>Non-stochastic version</h1>
<p>Without any randomness in the system, the above dynamics reduces to:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20S(t)%20=%20S(t_0)%20e%5E%7B%20%5Cmu%20t%7D%20%20"></p>
<p>With a doubling rate of say 20 days, we get over 300K after a year. That’s a lot. A creepy amount. And note that this is only for a a doubling rate of 20 days. In practice, many diseases may be spreading much faster.</p>
<p>The result is the plot below.</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2016-05-12-a-practical-approach-to-model-error/ExponentialGrowthCurve.png" class="img-fluid"></p>
</section>
<section id="stochastic-version" class="level1">
<h1>Stochastic version</h1>
<p>We now add the stochasticity mentioned earlier. Adding this type of multiplicative noise corresponds for instance to uncertainty in the spreading of the virus. We generated 1000 timelines. The plot can be found below:</p>
<p><img src="https://www.data-intuitive.com/insights/blog/2016-05-12-a-practical-approach-to-model-error/ExponentialGrowthCurveWithNoise.png" class="img-fluid"></p>
<p>It immediately becomes clear that some of the curves tend to grow very rapidly! The worst case (given 1000 random histories) is over 20 milion after one year. Compare that to the just over 300K in the case of the non-stochastic version.</p>
<p>Please note that adding stochasticity does not influence the average over the different timelines. The average value of the 1000 sample trajectories after one year is by definition around the value derived for the non-stochastic version. In other words, the distribution is highly skewed. In this case, we are even dealing with a fat-tailed distribution.</p>
</section>
<section id="discussion" class="level1">
<h1>Discussion</h1>
<p>This post is becoming quite long already. Let us conclude with one important consequence of the above and leave further dicussion for a later stage. Although the above simulation is very rudimentary, it shows that relatively small variations<sup>1</sup> to the rate of spreading cause the worst case scenario to be extremely far off the average scenario.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Even variations that are normally distributed, i.e., thin tailed.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>modelling</category>
  <category>notebook</category>
  <category>data science</category>
  <guid>https://www.data-intuitive.com/insights/blog/2016-05-12-a-practical-approach-to-model-error/index.html</guid>
  <pubDate>Thu, 12 May 2016 16:29:49 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/blog/2016-05-12-a-practical-approach-to-model-error/ExponentialGrowthCurve.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>Thoughts on the Spark Summit Europe 2015</title>
  <link>https://www.data-intuitive.com/insights/blog/2015-10-29-thoughts-on-the-spark-summit-europe-2015/index.html</link>
  <description><![CDATA[ 



<p>In this post, I summarize some of the things I picked up at the Spark Summit. Some of these require more thought or research, but at least I’ll have a to do list of things to look back at.</p>
<p>In the meanwhile, a lot of the <a href="https://www.youtube.com/channel/UCRzsq7k4-kT-h3TDUBQ82-w">talks are posted already on Youtube</a>.</p>
<p>So, let’s get started.</p>
<section id="dataframes" class="level1">
<h1>Dataframes</h1>
<p>I’ve been putting off using dataframes for a year now. There are two main reasons for doing this:</p>
<ol type="1">
<li>I like the (functional) API of the <code>RDD</code>’s more than the dataframes API.</li>
<li>I can do more with the <code>RDD</code> API which I need for most of the applications we’re working on.</li>
</ol>
<p>Unfortunately, a lot of the cool work on Spark and especially the machine learning (ML) and optimization (Tungsten) work is currently focussed on dataframes. I understand that, multiple people have explained why that is, but still I keep on thinking about the two reasons above.</p>
<p>In the next release (1.6), a new API will be available: <a href="https://twitter.com/setema/status/659288204470808577"><strong>DataSets</strong></a>. And it is exactly what I need to be happy using dataframes: The dataframe API, extended such that you can use the traditional functional API as well.</p>
</section>
<section id="sparkr" class="level1">
<h1>sparkR</h1>
<p>For the same reason I hadn’t used dataframes yet, I have not yet tried out using sparkR: it uses dataframes. The limitations of the dataframe means that when it comes to transforming the data in a dataframe, you are limited to the functions that are provided.</p>
<p>In Scala, it’s possible to define a UDF (User Defined Function), but until now that was not possible in sparkR. The next version of Spark, however, should support just that.</p>
</section>
<section id="databricks-cloud" class="level1">
<h1>Databricks Cloud</h1>
<p>I’ve been really impressed by the Databricks notebooks. Having worked with different Open Source notebooks already (iPython, Zeppelin, Spark-Notebook), this one is definitely better.</p>
<p>Some highlights:</p>
<ul>
<li>Very intuitive interface and extremely easy to attach a cluster to a notebook</li>
<li>Multiple users on the same notebook works seamlessly, and much like editing a Google Document</li>
<li>Good revision history</li>
<li>Import code from files (<code>%run ...</code>) or from <a href="http://www.github.com">Github</a></li>
<li>Included REST Server</li>
<li>Interoperability between different notebooks</li>
</ul>
</section>
<section id="spark-streaming" class="level1">
<h1>Spark Streaming</h1>
<p>Spark streaming has long been the part of the Spark package that was least covered and used. Everyone found it cool and interesting.</p>
<p>Now, during the talks, it became clear that the streaming aspect of Spark is very important. Lot’s of use cases described how they use Spark Streaming in their application, even in production.</p>
</section>
<section id="ml-pipelines" class="level1">
<h1>ML pipelines</h1>
<p>I <a href="https://databricks.com/blog/2015/01/07/ml-pipelines-a-new-high-level-api-for-mllib.html">read about it</a>. It looked cool on paper. Turns out it is even better in practice.</p>
<p>Many times, different steps occur when going from a dataset to a model and predictions. Often-times these steps are poorly documented and as a consequence not reproducible.</p>
<p>Now, with pipelines, you get a high-level API for configuring and running the different stages of a process. Downside is that it is yet another API to learn. But in this business, we don’t mind learning a few APIs…</p>
<p>It becomes even more interesting when the set of underlying algorithms and methods gets extended: hyper-parameter tuning, ML models, …</p>


</section>

 ]]></description>
  <category>spark</category>
  <category>distributed computing</category>
  <category>data science</category>
  <guid>https://www.data-intuitive.com/insights/blog/2015-10-29-thoughts-on-the-spark-summit-europe-2015/index.html</guid>
  <pubDate>Thu, 29 Oct 2015 18:09:01 GMT</pubDate>
</item>
<item>
  <title>Code Snippet Repository</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2015-05-29-code-snippet-repository/index.html</link>
  <description><![CDATA[ 



<p>I’m jumping between Scala/<a href="http://spark.apache.org/">Spark</a> coding, some Javascript in between, Python/PySpark and then some <a href="http://www.r-project.org/">R</a> every now and then. This in itself is already a challenge, but the worst thing is that I frequently encounter situations where I think:&nbsp;<em>I’ve encountered this situation before</em>. In many cases, it’s a situation that required quite some work to resolve. You end up with two possibilities: 1) retrieve the solution from some code somewhere on your harddisk or 2) start finding the solution again from <del>scratch</del>Google.</p>
<p>So I’m now wondering if this could not be organized better… Of course it can, but how? <a href="https://gist.github.com/">Github</a> has the ability to store snippets of code, I could just keep a file handy for every programming environment/language. What are you using?</p>
<p>Here’s an example of a snippet of Scala code that I need a lot: configuring a Spark context to use my credentials (store in environment variable) to connect to <a href="http://aws.amazon.com/s3/">Amazon S3</a>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb1-1"><span class="kw" style="color: #003B4F;">val</span> fs_s3_awsAccessKeyId <span class="op" style="color: #5E5E5E;">=</span> sys<span class="op" style="color: #5E5E5E;">.</span>env<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">get</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"AWS_ACCESS_KEY_ID"</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">getOrElse</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"&lt;key"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">val</span> fs_s3_awsSecretAccessKey <span class="op" style="color: #5E5E5E;">=</span> sys<span class="op" style="color: #5E5E5E;">.</span>env<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">get</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"AWS_SECRET_ACCESS_KEY"</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">getOrElse</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"&lt;key&gt;"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-3">sc<span class="op" style="color: #5E5E5E;">.</span>hadoopConfiguration<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">set</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"fs.s3n.awsAccessKeyId"</span><span class="op" style="color: #5E5E5E;">,</span> fs_s3_awsAccessKeyId<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-4">sc<span class="op" style="color: #5E5E5E;">.</span>hadoopConfiguration<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">set</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"fs.s3n.awsSecretAccessKey"</span><span class="op" style="color: #5E5E5E;">,</span> fs_s3_awsSecretAccessKey<span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p>How do you cope with this challenge?</p>



 ]]></description>
  <category>Scala</category>
  <category>Spark</category>
  <category>S3</category>
  <category>Code</category>
  <guid>https://www.data-intuitive.com/insights/blog/2015-05-29-code-snippet-repository/index.html</guid>
  <pubDate>Fri, 29 May 2015 13:45:42 GMT</pubDate>
</item>
<item>
  <title>Transposing a Spark RDD</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2015-01-15-transposing-a-spark-rdd/index.html</link>
  <description><![CDATA[ 



<p>I have been using <a href="http://spark.apache.org/">Spark</a> quite a lot for the last year. At first using the <a href="http://spark.apache.org/docs/latest/programming-guide.html#tab_scala_0">Scala</a> interface, but lately more using the <a href="http://spark.apache.org/docs/latest/programming-guide.html#tab_python_0">Python</a> one.</p>
<p>In one of my recent projects, I received a dataset that contains expression profiles of chemical compounds on genes. That is to say, I got a dataset which had this data transposed, i.e., genes versus compounds, but that is not a handy format to work with. I load the original data into an RDD, but then I have to transpose this RDD.</p>
<p>I have been looking on the web but found no complete solution. Recently, a similar question came up on the Spark mailinglist. So I thought it is about time that I posted my approach.</p>
<p>This is the code for the function that transposes an RDD and returns a new RDD. There are other approaches, and there is room for optimisation as well. But this already gets the work done.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> rddTranspose(rdd):</span>
<span id="cb1-2">    rddT1 <span class="op" style="color: #5E5E5E;">=</span> rdd.zipWithIndex()</span>
<span id="cb1-3">            .flatMap(<span class="kw" style="color: #003B4F;">lambda</span> (x,i): [(i,j,e) <span class="cf" style="color: #003B4F;">for</span> (j,e) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(x)])</span>
<span id="cb1-4">    rddT2 <span class="op" style="color: #5E5E5E;">=</span> rddT1.<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> (i,j,e): (j, (i,e)))</span>
<span id="cb1-5">            .groupByKey().sortByKey()</span>
<span id="cb1-6">    rddT3 <span class="op" style="color: #5E5E5E;">=</span> rddT2.<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> (i, x): <span class="bu" style="color: null;">sorted</span>(<span class="bu" style="color: null;">list</span>(x), </span>
<span id="cb1-7">                        <span class="bu" style="color: null;">cmp</span><span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> (i1,e1),(i2,e2) : <span class="bu" style="color: null;">cmp</span>(i1, i2)))</span>
<span id="cb1-8">    rddT4 <span class="op" style="color: #5E5E5E;">=</span> rddT3.<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> (i, y): y , x))</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;">return</span> rddT4.<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: np.asarray(x))</span></code></pre></div>
<p>This code converts the rows to numpy arrays in the return statement, so you need to import numpy as np. This step is strictly speaking not necessary, but it does make subsequent random access <em>inside</em> the rows faster.&nbsp;It must be noted as well that the procedure only works when one row (one element of the original RDD as well as the transposed RDD) fits into the JVM memory of the workers.</p>
<p>I left out the comments in my code, to keep it a little exciting for you…</p>



 ]]></description>
  <category>Data</category>
  <category>Spark</category>
  <guid>https://www.data-intuitive.com/insights/blog/2015-01-15-transposing-a-spark-rdd/index.html</guid>
  <pubDate>Thu, 15 Jan 2015 21:26:35 GMT</pubDate>
</item>
<item>
  <title>Writing Workflow and Reproducible Data Analysis</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2014-09-24-writing-workflow-and-reproducible-data-analysis/index.html</link>
  <description><![CDATA[ 



<p>I’ve been writing about my <a href="http://www.data-intuitive.com/2013/06/writing-workflow-markdown-pandoc-latex-and-the-likes/">writing</a> <a href="http://www.data-intuitive.com/2013/10/activity-monitoring-from-smartphone-sensor-data-in-a-new-layout/">workflow</a> <a href="http://www.data-intuitive.com/2014/07/publishing-html-presentations-on-github/">before</a>. Since some aspects of it are related to reproducible research and especially reproducible data analysis, I have <a href="https://github.com/tverbeiren/ReproducibleDataAnalysis">collected some material and tips</a> in a presentation I gave last week on my <a href="https://github.com/tverbeiren">Github</a>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://github.com/tverbeiren/ReproducibleDataAnalysis"><img src="https://www.data-intuitive.com/insights/blog/2014-09-24-writing-workflow-and-reproducible-data-analysis/RR.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">RR</figcaption><p></p>
</figure>
</div>
<p>One aspect that I did not yet mention there, is how I approach this on my Mac. This depends a little bit on what type of text I’m writing. Data analysis is usually done within <a href="http://www.rstudio.com/">RStudio</a>. It has very good functionality for generating PDFs and the like, but I still prefer my own Makefile and knitr/Pandoc combination.</p>
<p>Less technical texts are usually writing using i<a href="http://www.iawriter.com/mac/">AWriter</a>, but sometimes also in <a href="http://www.sublimetext.com/">Sublime Text</a>.&nbsp;iAWriter by default has support for Markdown, Sublime Text can be configured with a very good Markdown plugin. I use <a href="http://marked2app.com/">Marked</a> for previewing, proof-reading, etc.</p>



 ]]></description>
  <category>Writing</category>
  <category>Workflow</category>
  <category>Reproducible Data Analysis</category>
  <guid>https://www.data-intuitive.com/insights/blog/2014-09-24-writing-workflow-and-reproducible-data-analysis/index.html</guid>
  <pubDate>Wed, 24 Sep 2014 05:00:52 GMT</pubDate>
  <media:content url="https://www.data-intuitive.com/insights/blog/2014-09-24-writing-workflow-and-reproducible-data-analysis/RR.png" medium="image" type="image/png" height="186" width="144"/>
</item>
<item>
  <title>Impact in Risk Assessment</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2014-09-23-impact-in-risk-assessment/index.html</link>
  <description><![CDATA[ 



<p>How many times have you seen project charters or business cases where a form of risk assessment has been provided? In many cases, people try to make the risks tangible and actionable by means of a <a href="http://en.wikipedia.org/wiki/Risk_Matrix">risk matrix</a>. In this approach, every risk gets 2 parameters associated to it: <em>probability</em> of the risk occurring and <em>impact</em> when the risk occurs. In most cases, 3 possibilities are given for both parameters: low, medium, high.</p>
<p>There are&nbsp;two&nbsp;very big advantages to this approach:</p>
<ol type="1">
<li><p>It gives people a framework, a way to quantify risks that is easy to understand</p></li>
<li><p>The method not only looks at the probability of an event, but also at its impact. The latter has practical consequences.</p></li>
</ol>
<p>There are also disadvantages to this approach. Some are mentioned already on the <a href="http://en.wikipedia.org/wiki/Risk_Matrix">Wikipedia page</a>, but three are missing, in my opinion:</p>
<ol type="1">
<li><p>Many events with high impact a) have&nbsp;often not been taught of as a risk or b) are the consequence of a combination of factors.</p></li>
<li><p>Usually, events that are rare have a bigger impact. But the probability of rare events is very hard to assess.</p></li>
<li><p>Impact appears&nbsp;to be a linear function, but it is not.</p></li>
</ol>
<p>Let us give an example of the latter point. One computer failing in the office has small impact because the user may get a replacement lying around in 10 minutes or less. 10 computers failing in the office will require more time, because no 10 people are standby to service them in parallel and spare computers may be lacking. Imagine a fire, a hack, or something we can not think of now (see above)? When hundreds of computers need to be replaced?</p>
<p>This is a situation where the impact of an event increases faster than linear (polynomial? exponential?). It may get worse, when an event causes an impact that is not recoverable anymore: too much electricity can kill a person, too many losses can ruin even a bank or a state, etc.</p>
<p>The first two arguments can be thought of as applications of the <a href="http://www.amazon.com/The-Black-Swan-Improbable-Robustness/dp/081297381X">Black Swan</a> concept to projects and risk. The last argument is an application of the concept that is elaborated on&nbsp;in a book by the same author: <a href="http://www.amazon.com/Antifragile-Things-That-Disorder-Incerto/dp/0812979680">Antifragile</a>. Books could be written just applying concepts from these books!</p>
<p>What does it tell us? When considering mitigation of risks, <em>think about what are possible consequences on a large scale</em>, not on the scale of individual events. Think about consequences like: nobody is able to work anymore, the whole building is destroyed, our competitor has leapfrogged us, etc. Thinking about mitigation of these consequences&nbsp;may tell you more about the underlying risks and events than the other way around.</p>
<p>On a slightly cynical note: While doing so, you may find that more (advanced) technology is not always a solution because it usually makes things more complex and thus prone to more complex risks rather than avoiding them.</p>



 ]]></description>
  <category>Decision</category>
  <category>Risk</category>
  <guid>https://www.data-intuitive.com/insights/blog/2014-09-23-impact-in-risk-assessment/index.html</guid>
  <pubDate>Tue, 23 Sep 2014 18:00:53 GMT</pubDate>
</item>
<item>
  <title>Publishing html presentations on Github</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2014-07-10-publishing-html-presentations-on-github/index.html</link>
  <description><![CDATA[ 



<p>You’ve seen those <a href="https://github.com/hakimel/reveal.js/wiki/Example-Presentations">fancy html presentations</a> on the web? <a href="http://lab.hakim.se/reveal-js">Reveal.js</a> is a framework to create such things of beauty. And it goes along well with my <a href="http://www.data-intuitive.com/2013/06/writing-workflow-markdown-pandoc-latex-and-the-likes/">Markdown</a> based style of writing, even for presentation slides.</p>
<p>I usually create the presentations on my laptop, using <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a> to convert to html. In principle, this should be ready for the web by default. If only I had an easy hosting solution to move it to.</p>
<p><a href="https://github.com/">Github</a> allows you to host html files and even complete web sites. I had never tried it myself, but now I did. It’s really simple. Move your repository into the branch <code>gh-pages</code> (you can do this on the Github website) and finished. The web site is accessible via <code>http://&lt;username&gt;.github.io/&lt;projectname&gt;</code>. This is what Github calls a <em>Project Page</em>.</p>
<p>Behind the scenes, Github uses <a href="http://jekyllrb.com/">Jekyll</a>&nbsp;for building static website from source files in, e.g., Markdown format. When you publish something to the <code>gh-pages</code> branch, it automatically kicks in… and gave very vague errors in my case.</p>
<p>After some trial and error, I found out, the best approach is to install <code>jekyll</code> yourself and launch it locally. This immediately gives a readable error message. It turned out I had a stale symlink in my directory tree. Removing this removed the building issue for Github.</p>
<p>The result can be seen here:&nbsp;<a href="http://tverbeiren.github.io/BigDataBe-Spark">http://tverbeiren.github.io/BigDataBe-Spark</a>.</p>
<p>BTW, in order to install <code>jekyll</code> on my MacBook Air, I had to install a newer version of <code>Ruby</code> (tip: use <code>rvm</code> for this, <a href="https://rvm.io/">link</a>).</p>



 ]]></description>
  <category>Data</category>
  <category>Writing</category>
  <guid>https://www.data-intuitive.com/insights/blog/2014-07-10-publishing-html-presentations-on-github/index.html</guid>
  <pubDate>Thu, 10 Jul 2014 10:14:43 GMT</pubDate>
</item>
<item>
  <title>Running Docker on MacOSX</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2013-11-25-running-docker-on-macosx/index.html</link>
  <description><![CDATA[ 



<p>I found out about <a href="http://www.docker.io/">docker</a> this morning via <a href="https://amplab.cs.berkeley.edu/2013/10/23/got-a-minute-spin-up-a-spark-cluster-on-your-laptop-with-docker/">the blog of the people behind AMPlab</a>, creators of Spark and such. In short (because it’s actually much more than this) it lets you run a Spark/Shark cluster (pre-built!) on your PC.</p>
<p>I want to use it to experiment with a (virtual) Spark/Shark cluster on my laptop.&nbsp;Isn’t that cool?!</p>
<p>Unfortunately, docker is built for Ubuntu. Fortunately, there are instructions on how to set it up on other systems.</p>
<p>Two things needed to be done before I got it to work:</p>
<ol type="1">
<li><p>Upgrade the amount of memory available to Vagrant to 2GB. See here:&nbsp;<a href="http://docs-v1.vagrantup.com/v1/docs/config/vm/customize.html">http://docs-v1.vagrantup.com/v1/docs/config/vm/customize.html</a>.</p></li>
<li><p>Edit the <a href="https://github.com/amplab/docker-scripts/blob/master/deploy/start_nameserver.sh">nameserver script</a> in order for the nameserver test to complete with success.</p></li>
</ol>
<p>For the second, I changed</p>
<pre><code>dig nameserver @${NAMESERVER_IP} | grep ANSWER -A1 | grep 127.0.0.1 &gt; /dev/null;</code></pre>
<p>into</p>
<pre><code>dig nameserver @${NAMESERVER_IP} | grep ANSWER -A1 | grep ${NAMESERVER_IP} &gt; /dev/null;</code></pre>



 ]]></description>
  <guid>https://www.data-intuitive.com/insights/blog/2013-11-25-running-docker-on-macosx/index.html</guid>
  <pubDate>Mon, 25 Nov 2013 14:20:40 GMT</pubDate>
</item>
<item>
  <title>Turning Cloudera Quickstart VM into an R Studio Server</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2013-08-16-turning-cloudera-quickstart-vm-into-an-r-studio-server/index.html</link>
  <description><![CDATA[ 



<p>Downloading the image (in my case for VirtualBox) is easy enough. Make sure that the VM has a connection to the internet.</p>
<pre><code>sudo yum -y install R
sudo yum -y install wget</code></pre>
<p>From the <a href="http://www.rstudio.com/ide/download/server">R Studio Server&nbsp;website</a>:</p>
<pre><code>wget http://download2.rstudio.org/rstudio-server-0.97.551-x86_64.rpm
sudo yum install --nogpgcheck rstudio-server-0.97.551-x86_64.rpm</code></pre>
<p>Ready! Make sure to connect using a local user (if necessary, create one).</p>
<p>There’s one caveat though. R version 3.0.1 is installed and most packages for working with Hadoop are not yet ported to version 3.</p>
<p>A quick workaround is the following:</p>
<p>Within R:</p>
<pre><code>install.packages(c('Rcpp','RJSONIO','bitops','digest','functional','stringr','plyr','reshape2','rJava'))</code></pre>
<p>From the console:</p>
<pre><code>wget https://github.com/RevolutionAnalytics/rmr2/raw/master/build/rmr2_2.2.2.tar.gz




wget https://github.com/RevolutionAnalytics/rhdfs/raw/master/build/rhdfs_1.0.6.tar.gz




wget https://github.com/RevolutionAnalytics/rhbase/raw/master/build/rhbase_1.2.0.tar.gz</code></pre>
<p>From the console:</p>
<pre><code>sudo R CMD INSTALL r*.tar.gz</code></pre>
<p>This should do the trick!</p>



 ]]></description>
  <guid>https://www.data-intuitive.com/insights/blog/2013-08-16-turning-cloudera-quickstart-vm-into-an-r-studio-server/index.html</guid>
  <pubDate>Fri, 16 Aug 2013 12:48:26 GMT</pubDate>
</item>
<item>
  <title>Writing workflow: Markdown, Pandoc, LaTeX and the likes</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2013-06-24-writing-workflow-markdown-pandoc-latex-and-the-likes/index.html</link>
  <description><![CDATA[ 



<p>You wouldn’t tell from the updates on this website, but I’m actively writing again. Offline, that is, the online part is for later. For now, I want to share my experience improving my writing workflow.</p>
<p>In the past, I used <a href="http://www.latex-project.org/">LaTeX</a> for scientific texts and MS Word for everything else. LaTeX gives me the professional and typographically correct texts that I want, but I spent too much time fiddling around with packages, remembering markup, etc. MS Word, on the other hand, quickly made me get things done, albeit without the professional look or scientific powers.</p>
<p>I’m now in a situation that any writing (technical, scientific and even&nbsp;prose) can be done in the same way, delivering results in PDF, html or even MS Word:</p>
<ol type="1">
<li><p>It usually starts in <a href="http://www.iawriter.com/mac/">iA Writer</a>&nbsp;(on the Mac or the iPad), but any word processor able to handle ASCII text can be used. I choose iA Writer because of its distraction free writing.</p></li>
<li><p><a href="http://daringfireball.net/projects/markdown/">Markdown</a> is used as markup specification (including figures, footnotes, emphasis, etc.). Markdown is very basic, but it lets you focus on the content, rather than the form.</p></li>
<li><p><a href="http://www.rstudio.com/ide/docs/r_markdown">Programming</a> code (<a href="http://www.r-project.org/">R</a> for instance), <a href="http://www.rstudio.com/ide/docs/authoring/using_markdown_equations">formulas</a>, etc. can all be included in the Markdown format by means of the proper notation and possibly some extensions to the parser (see step 4).</p></li>
<li><p>By means of <a href="http://johnmacfarlane.net/pandoc/README.html">Pandoc</a>, the text is converted into the appropriate format (html, pdf, LaTeX, ePub, DocBook, …)</p></li>
<li><p>Ready!</p></li>
</ol>
<p>Ok, I hear you thinking, but you just lost all possible configuration of look and feel, layout, etc… That’s correct, there are some Markdown writing tools that allow you to create PDFs that look awful.</p>
<p>The nice thing about Pandoc though is that during the conversion step (4), you can specify the templates (CSS, LaTeX header code, MS Word template) that should be used.</p>
<p>It takes some fiddling in order to get the correct options to Pandoc and get proper templates in place. A Google should get you going.</p>
<p>An example. From a slight adaptation of this file, we generate a Markdown file and this is converted in the <a href="http://www.data-intuitive.com/?attachment_id=453">PDF linked here</a>. A similar process is used to create the reports for the different analysis steps for the <a href="https://github.com/tverbeiren/dataMineR">dataMineR project</a>.</p>
<p>Leave a comment if you would like to see more examples.</p>



 ]]></description>
  <guid>https://www.data-intuitive.com/insights/blog/2013-06-24-writing-workflow-markdown-pandoc-latex-and-the-likes/index.html</guid>
  <pubDate>Mon, 24 Jun 2013 13:10:00 GMT</pubDate>
</item>
<item>
  <title>SLM: Issues with traditional SLM (Part 7)</title>
  <dc:creator>Toni</dc:creator>
  <link>https://www.data-intuitive.com/insights/blog/2013-01-25-slm-issues-with-traditional-slm-part-7/index.html</link>
  <description><![CDATA[ 



<section id="avoid-accountability" class="level3">
<h3 class="anchored" data-anchor-id="avoid-accountability">Avoid Accountability</h3>
<p>When all goes wrong, and the KPIs are showing bad performance, there is one last option: avoid accountability. For instance, because other teams have not done their job which caused the resolution time to be above threshold. This can quickly lead to long discussions and eventually mistrust between teams and companies.</p>


</section>

 ]]></description>
  <category>Data</category>
  <category>SLM</category>
  <guid>https://www.data-intuitive.com/insights/blog/2013-01-25-slm-issues-with-traditional-slm-part-7/index.html</guid>
  <pubDate>Fri, 25 Jan 2013 06:00:04 GMT</pubDate>
</item>
</channel>
</rss>
